# https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60
name: build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC (Release)",
            os: ubuntu-latest,
            build_type: "Release",
            enable_tests: "ON",
            enable_coverage: "OFF",
            enable_asan: "OFF",
            code_quality: false,
          }
          - {
            name: "Ubuntu 22.04 GCC (Debug)",
            os: ubuntu-22.04,
            build_type: "Debug",
            enable_tests: "ON",
            enable_coverage: "ON",
            enable_asan: "ON",
            code_quality: true,
          }
          - {
            name: "macOS Latest Clang (Release)",
            os: macos-latest,
            build_type: "Release",
            enable_tests: "ON",
            enable_coverage: "OFF",
            enable_asan: "OFF",
            code_quality: false,
          }
          - {
            name: "Windows Latest (Release)",
            os: windows-latest,
            build_type: "Release",
            enable_tests: "ON",
            enable_coverage: "OFF",
            enable_asan: "OFF",
            code_quality: false,
          }

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Cache
        uses: actions/cache@v3
        with:
          path: |
            build/
            build-code-quality/
          key: ${{ matrix.config.name }}-cmake-${{ hashFiles('CMakeLists.txt', 'cmake/*.cmake') }}

      - name: Code Quality
        run: |
          ./tools/code-quality.sh ${{ github.event.repository.default_branch }} ${{ github.event_name }} ${{github.workspace}} \
            ${{github.workspace}}/build-code-quality ${{ matrix.config.build_type }} tests
        if: matrix.config.code_quality == true

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DENABLE_TESTS=${{ matrix.config.enable_tests }} \
            -DENABLE_COVERAGE=${{ matrix.config.enable_coverage }} \
            -DENABLE_ASAN=${{ matrix.config.enable_asan }}

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config ${{ matrix.config.build_type }} --target tests

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ matrix.config.build_type }} --verbose -R zip_test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.config.enable_coverage == 'ON'
